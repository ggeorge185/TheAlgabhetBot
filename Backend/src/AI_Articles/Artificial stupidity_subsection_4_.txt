There are many ways to deliberately introduce poor decision-making in search algorithms. Take the minimax algorithm for example. The minimax algorithm is an adversarial search algorithm that is popularly used in games that require more than one player to compete against each other. The main purpose in this algorithm is to choose a move that maximizes your chance of winning and avoid moves that maximizes the chance of your opponent winning. An algorithm like this would be extremely beneficial to the computer as computers are able to search thousands of moves ahead. To "dumb down" this algorithm to allow for different difficulty levels, heuristic functions have to be tweaked. Normally, huge points are given in winning states. Tweaking the heuristic by reducing such big payoffs would reduce the chance of the algorithm in choosing the winning state.

Creating heuristic functions to allow for stupidity is more difficult than one might think. If a heuristic allows for the best move, the computer opponent would be too omniscient, making the game frustrating and unenjoyable. But if the heuristic is poor, the game might also be unenjoyable. Therefore, a balance of good moves and bad moves in an adversarial game relies on a well-implemented heuristic function.

