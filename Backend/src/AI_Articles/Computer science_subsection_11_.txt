main|Programming language theory|Formal methods}}
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual Programming language#Elements|features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering, and linguistics. It is an active research area, with numerous dedicated academic journals.

Formal methods are a particular kind of Mathematics|mathematically based technique for the formal specification|specification, development and formal verification|verification of software and computer hardware|hardware systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or computer security|security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic in computer science|logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.

</math>
| File:Compiler.svg|96px
| File:Python add5 syntax.svg|96px
| File:Prop-tableau-1.svg|96px
| File:Coq plus comm screenshot.jpg|96px
|-
| Semantics (computer science)|Formal semantics
| Type theory
| Compiler construction|Compiler design
| Programming languages
| Formal verification
| Automated theorem proving
|}

